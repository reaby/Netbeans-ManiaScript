options {
  JAVA_UNICODE_ESCAPE = true;
  BUILD_PARSER = false;
  ERROR_REPORTING = false;
  STATIC = false;
  JDK_VERSION = "1.5";
  TOKEN_FACTORY = "Token";
}


PARSER_BEGIN(ManiaScriptParser)

package org.maniascript.jcclexer;
public class ManiaScriptParser { }

PARSER_END(ManiaScriptParser)

/* WHITE SPACE */

TOKEN :
{
  < WHITESPACE:
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f" >
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
|
  "\"\"\"" : IN_TRIPLE_QUOTE_LITERAL

}

<IN_SINGLE_LINE_COMMENT>
TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_TRIPLE_QUOTE_LITERAL>
TOKEN :
{
  <TRIPLE_QUOTE_LITERAL: "\"\"\"" > : DEFAULT
}


<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT, IN_TRIPLE_QUOTE_LITERAL>
MORE :
{
  < ~[] >
}

/* JAVA RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ASSERT: "assert" >
| < AS: "as" >
| < BOOLEAN: "Boolean" >
| < BREAK: "break" >
| < CASE: "case" >
| < CONST: "#Const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DECLARE: "declare" >
| < ELSE: "else" >
| < EXTENDS: "#Extends" >
| < FALSE: "False" >
| < FOR: "for" >
| < FOREACH: "foreach" >
| < IF: "if" >
| < IN: "in" >
| < INCLUDE: "#Include" >
| < IDENT: "Indent" >
| < INTEGER: "Integer" >
| < INT3: "Int3" >
| < MAIN: "main" >
| < NOW: "Now" >
| < NETREAD: "netread" >
| < NETWRITE: "netwrite" >
| < NULL: "Null" >
| < NULLID: "NullId" >
| < LOG: "log" >
| < REAL: "Real" >
| < RETURN: "return" >
| < REQUIRECONTEXT: "#RequireContext" >
| < SLEEP: "sleep" >
| < SETTING: "#Setting" >
| < SWITCH: "switch" >
| < TRUE: "True" >
| < TEXT: "Text" >
| < VEC2: "Vec2" >
| < VEC3: "Vec3" >
| < VOID: "Void" >
| < WAIT: "wait" >
| < YIELD: "yield" >
| < WHILE: "while" >
}


/* JAVA LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            | "u" (["0"-"9"] | ["a"-"f"] | ["A"-"F"]) (["0"-"9"] | ["a"-"f"] | ["A"-"F"]) (["0"-"9"] | ["a"-"f"] | ["A"-"F"]) (["0"-"9"] | ["a"-"f"] | ["A"-"F"])
            )
          )
      )*
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            | "u" (["0"-"9"] | ["a"-"f"] | ["A"-"F"]) (["0"-"9"] | ["a"-"f"] | ["A"-"F"]) (["0"-"9"] | ["a"-"f"] | ["A"-"F"]) (["0"-"9"] | ["a"-"f"] | ["A"-"F"])
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < ALIAS: "<=>" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < DOUBLECOLON: "::" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < TEXT_APPEND: "^" >
| < REM: "%" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < TEXTASSIGN: "^=" >
| < REMASSIGN: "%=" >

}

TOKEN :
{
    < JAVACC_NUM_CHAR: "#" >
}

TOKEN :
{
 < ALL: ( ~[" ", "\t", "\n","\r", "\f"] ) >
}
