/* Generated By:JavaCC: Do not edit this line. ManiaScriptParser.java */
package org.maniascript.jccparser;

import java.io.*;
import java.util.*;

public class ManiaScriptParser implements ManiaScriptParserConstants {

    public List<ParseException> syntaxErrors = new ArrayList<ParseException>();

    void recover(ParseException ex, int recoveryPoint) {
        syntaxErrors.add(ex);
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != EOF && t.kind != recoveryPoint);
    }

    public static void main(String args[]) {
        ManiaScriptParser parser;
        if (args.length == 0) {
            System.out.println("ManiaScript Parser Version 0.1Alpha:  Reading from standard input . . .");
            parser = new ManiaScriptParser(System.in);
        } else if (args.length == 1) {
            System.out.println("ManiaScript Parser Version 0.1Alpha:  Reading from file " + args[0] + " . . .");
            try {
                parser = new ManiaScriptParser(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.out.println("ManiaScript Parser Version 0.1:  File " + args[0] + " not found.");
                return;
            }
        } else {
            System.out.println("ManiaScript Parser Version 0.1Alpha:  Usage is one of:");
            System.out.println("         java ManiaScript < inputfile");
            System.out.println("OR");
            System.out.println("         java ManiaScript inputfile");
            return;
        }
        try {
            parser.ManiaScriptFile();
            System.out.println("ManiaScript Parser Version 0.1Alpha:  ManiaScript file parsed successfully.");
        } catch (ParseException e) {
            System.out.println("ManiaScript Parser Version 0.1Alpha:  Encountered errors during parse.");
            System.out.println(e.getMessage());
        }
    }

    /* 
     *  LANGUAGE PARSER STARTS HERE
     */
    final public void ManiaScriptFile() throws ParseException {
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BREAK:
                case CASE:
                case CONST:
                case CONTINUE:
                case FOREACH:
                case IF:
                case INCLUDE:
                case LOG:
                case RETURN:
                case SWITCH:
                case WHILE:
                case LBRACE:
                case SEMICOLON:
                case STAR:
                case SLASH:
                case REM:
                    ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            Statement();
        }
    }

    final public void Statement() throws ParseException {
        try {
            if (jj_2_1(2)) {
                LabeledStatement();
            } else if (jj_2_2(2)) {
                ExpressionStatement();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case LBRACE:
                        CompoundStatement();
                        break;
                    case IF:
                    case SWITCH:
                        SelectionStatement();
                        break;
                    case FOREACH:
                    case WHILE:
                        IterationStatement();
                        break;
                    case BREAK:
                    case CONTINUE:
                    case RETURN:
                        JumpStatement();
                        break;
                    case INCLUDE:
                        IncludeStatement();
                        break;
                    case LOG:
                        LogStatement();
                        break;
                    case CONST:
                        DefineStatement();
                        break;
                    case SEMICOLON:
                        EndOfStatement();
                        break;
                    default:
                        jj_la1[1] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (ParseException ex) {
            recover(ex, SEMICOLON);
        }
    }

    final public void EndOfStatement() throws ParseException {
        jj_consume_token(SEMICOLON);
    }

    final public void DefineStatement() throws ParseException {
        jj_consume_token(CONST);
        String();
        Expression();
    }

    final public void LabeledStatement() throws ParseException {
        jj_consume_token(CASE);
        Expression();
        jj_consume_token(COLON);
        Statement();
    }

    final public void ExpressionStatement() throws ParseException {
        Expression();
        EndOfStatement();
    }

    final public void CompoundStatement() throws ParseException {
        try {
            jj_consume_token(LBRACE);
            label_2:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case BREAK:
                    case CASE:
                    case CONST:
                    case CONTINUE:
                    case FOREACH:
                    case IF:
                    case INCLUDE:
                    case LOG:
                    case RETURN:
                    case SWITCH:
                    case WHILE:
                    case LBRACE:
                    case SEMICOLON:
                    case STAR:
                    case SLASH:
                    case REM:
                        ;
                        break;
                    default:
                        jj_la1[2] = jj_gen;
                        break label_2;
                }
                Statement();
            }
            jj_consume_token(RBRACE);
        } catch (ParseException ex) {
            recover(ex, SEMICOLON);
        }

    }

    final public void SelectionStatement() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IF:
                jj_consume_token(IF);
                jj_consume_token(LPAREN);
                Expression();
                jj_consume_token(RPAREN);
                Statement();
                if (jj_2_3(2)) {
                    jj_consume_token(ELSE);
                    Statement();
                } else {
                    ;
                }
                break;
            case SWITCH:
                jj_consume_token(SWITCH);
                jj_consume_token(LPAREN);
                Expression();
                jj_consume_token(RPAREN);
                Statement();
                break;
            default:
                jj_la1[3] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void IterationStatement() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case WHILE:
                jj_consume_token(WHILE);
                jj_consume_token(LPAREN);
                Expression();
                jj_consume_token(RPAREN);
                Statement();
                break;
            case FOREACH:
                jj_consume_token(FOREACH);
                jj_consume_token(LPAREN);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case STAR:
                    case SLASH:
                    case REM:
                        Expression();
                        break;
                    default:
                        jj_la1[4] = jj_gen;
                        ;
                }
                jj_consume_token(IN);
                Variable();
                jj_consume_token(RPAREN);
                Statement();
                break;
            default:
                jj_la1[5] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void JumpStatement() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case CONTINUE:
                jj_consume_token(CONTINUE);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case INTEGER_LITERAL:
                        jj_consume_token(INTEGER_LITERAL);
                        break;
                    default:
                        jj_la1[6] = jj_gen;
                        ;
                }
                EndOfStatement();
                break;
            case BREAK:
                jj_consume_token(BREAK);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case INTEGER_LITERAL:
                        jj_consume_token(INTEGER_LITERAL);
                        break;
                    default:
                        jj_la1[7] = jj_gen;
                        ;
                }
                EndOfStatement();
                break;
            case RETURN:
                jj_consume_token(RETURN);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case STAR:
                    case SLASH:
                    case REM:
                        Expression();
                        break;
                    default:
                        jj_la1[8] = jj_gen;
                        ;
                }
                EndOfStatement();
                break;
            default:
                jj_la1[9] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void ParameterList() throws ParseException {
        Parameter();
        label_3:
        while (true) {
            if (jj_2_4(2)) {
                ;
            } else {
                break label_3;
            }
            jj_consume_token(COMMA);
            Parameter();
        }
    }

    final public void Parameter() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IDENTIFIER:
                jj_consume_token(IDENTIFIER);
                break;
            default:
                jj_la1[10] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case BIT_AND:
                jj_consume_token(BIT_AND);
                break;
            default:
                jj_la1[11] = jj_gen;
                ;
        }
        Variable();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ASSIGN:
                jj_consume_token(ASSIGN);
                Expression();
                break;
            default:
                jj_la1[12] = jj_gen;
                ;
        }
    }

    final public void IncludeStatement() throws ParseException {
        jj_consume_token(INCLUDE);
        String();
        jj_consume_token(AS);
        Variable();
    }

    final public void ConstStatement() throws ParseException {
        jj_consume_token(CONST);
        Variable();
        jj_consume_token(AS);
        String();
    }

    final public void LogStatement() throws ParseException {
        jj_consume_token(LOG);
        ArgumentExpressionList();
        EndOfStatement();
    }

    final public void Expression() throws ParseException {
        LogicalTextOrExpression();
    }

    final public void LogicalTextOrExpression() throws ParseException {
        LogicalTextAndExpression();
        if (jj_2_5(2)) {
            jj_consume_token(OR);
            LogicalTextOrExpression();
        } else {
            ;
        }
    }

    final public void LogicalTextAndExpression() throws ParseException {
        AssignmentExpression();
        if (jj_2_6(2)) {
            jj_consume_token(AND);
            LogicalTextAndExpression();
        } else {
            ;
        }
    }

    final public void AssignmentExpression() throws ParseException {
        ConditionalExpression();
        if (jj_2_7(2)) {
            AssignmentOperator();
            Expression();
        } else {
            ;
        }
    }

    final public void AssignmentOperator() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ALIAS:
                jj_consume_token(ALIAS);
                break;
            case ASSIGN:
                jj_consume_token(ASSIGN);
                break;
            case PLUSASSIGN:
                jj_consume_token(PLUSASSIGN);
                break;
            case MINUSASSIGN:
                jj_consume_token(MINUSASSIGN);
                break;
            case STARASSIGN:
                jj_consume_token(STARASSIGN);
                break;
            case SLASHASSIGN:
                jj_consume_token(SLASHASSIGN);
                break;
            case 105:
                jj_consume_token(105);
                break;
            case REMASSIGN:
                jj_consume_token(REMASSIGN);
                break;
            case ANDASSIGN:
                jj_consume_token(ANDASSIGN);
                break;
            case ORASSIGN:
                jj_consume_token(ORASSIGN);
                break;
            case TEXTASSIGN:
                jj_consume_token(TEXTASSIGN);
                break;
            case 106:
                jj_consume_token(106);
                break;
            case 107:
                jj_consume_token(107);
                break;
            default:
                jj_la1[13] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void ConditionalExpression() throws ParseException {
        Logical_Or_Expression();
        if (jj_2_8(2)) {
            jj_consume_token(HOOK);
            Expression();
            jj_consume_token(COLON);
            Expression();
        } else {
            ;
        }
    }

    final public void Logical_Or_Expression() throws ParseException {
        Logical_And_Expression();
        if (jj_2_9(2)) {
            jj_consume_token(OR);
            Logical_Or_Expression();
        } else {
            ;
        }
    }

    final public void Logical_And_Expression() throws ParseException {
        BitwiseOrExpression();
        if (jj_2_10(2)) {
            jj_consume_token(AND);
            Logical_And_Expression();
        } else {
            ;
        }
    }

    final public void BitwiseOrExpression() throws ParseException {
        BitwiseXorExpression();
        if (jj_2_11(2)) {
            jj_consume_token(BIT_OR);
            BitwiseOrExpression();
        } else {
            ;
        }
    }

    final public void BitwiseXorExpression() throws ParseException {
        BitwiseAndExpression();
        if (jj_2_12(2)) {
            jj_consume_token(TEXT_APPEND);
            BitwiseXorExpression();
        } else {
            ;
        }
    }

    final public void BitwiseAndExpression() throws ParseException {
        EqualityExpression();
        if (jj_2_13(2)) {
            jj_consume_token(BIT_AND);
            BitwiseAndExpression();
        } else {
            ;
        }
    }

    final public void EqualityExpression() throws ParseException {
        RelationalExpression();
        if (jj_2_14(2)) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case EQ:
                    jj_consume_token(EQ);
                    break;
                case NE:
                    jj_consume_token(NE);
                    break;
                case 108:
                    jj_consume_token(108);
                    break;
                case 109:
                    jj_consume_token(109);
                    break;
                default:
                    jj_la1[14] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            EqualityExpression();
        } else {
            ;
        }
    }

    final public void RelationalExpression() throws ParseException {
        ShiftExpression();
        if (jj_2_15(2)) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LT:
                    jj_consume_token(LT);
                    break;
                case GT:
                    jj_consume_token(GT);
                    break;
                case LE:
                    jj_consume_token(LE);
                    break;
                case GE:
                    jj_consume_token(GE);
                    break;
                default:
                    jj_la1[15] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            RelationalExpression();
        } else {
            ;
        }
    }

    final public void ShiftExpression() throws ParseException {
        AdditiveExpression();
        if (jj_2_16(2)) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 110:
                    jj_consume_token(110);
                    break;
                case 111:
                    jj_consume_token(111);
                    break;
                default:
                    jj_la1[16] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            ShiftExpression();
        } else {
            ;
        }
    }

    final public void AdditiveExpression() throws ParseException {
        MultiplicativeExpression();
        if (jj_2_17(2)) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUS:
                    jj_consume_token(PLUS);
                    break;
                case MINUS:
                    jj_consume_token(MINUS);
                    break;
                case TEXT_APPEND:
                    jj_consume_token(TEXT_APPEND);
                    break;
                default:
                    jj_la1[17] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            AdditiveExpression();
        } else {
            ;
        }
    }

    final public void MultiplicativeExpression() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case STAR:
                jj_consume_token(STAR);
                break;
            case SLASH:
                jj_consume_token(SLASH);
                break;
            case REM:
                jj_consume_token(REM);
                break;
            default:
                jj_la1[18] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        MultiplicativeExpression();
    }

    final public void UnaryExpression() throws ParseException {
        label_4:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BANG:
                case TILDE:
                case MINUS:
                case BIT_AND:
                    ;
                    break;
                default:
                    jj_la1[19] = jj_gen;
                    break label_4;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BIT_AND:
                    jj_consume_token(BIT_AND);
                    break;
                case MINUS:
                    jj_consume_token(MINUS);
                    break;
                case TILDE:
                    jj_consume_token(TILDE);
                    break;
                case BANG:
                    jj_consume_token(BANG);
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        PrefixIncDecExpression();
    }

    final public void PrefixIncDecExpression() throws ParseException {
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INCR:
                case DECR:
                    ;
                    break;
                default:
                    jj_la1[21] = jj_gen;
                    break label_5;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INCR:
                    jj_consume_token(INCR);
                    break;
                case DECR:
                    jj_consume_token(DECR);
                    break;
                default:
                    jj_la1[22] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        PostfixIncDecExpression();
    }

    final public void PostfixIncDecExpression() throws ParseException {
        label_6:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INCR:
                case DECR:
                    ;
                    break;
                default:
                    jj_la1[23] = jj_gen;
                    break label_6;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INCR:
                    jj_consume_token(INCR);
                    break;
                case DECR:
                    jj_consume_token(DECR);
                    break;
                default:
                    jj_la1[24] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    final public void PostfixExpression() throws ParseException {
        PrimaryExpression();
        label_7:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LPAREN:
                case LBRACE:
                case LBRACKET:
                case DOT:
                case DOUBLECOLON:
                    ;
                    break;
                default:
                    jj_la1[25] = jj_gen;
                    break label_7;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LPAREN:
                    jj_consume_token(LPAREN);
                    ArgumentExpressionList();
                    jj_consume_token(RPAREN);
                    break;
                case DOT:
                    jj_consume_token(DOT);
                    PostfixExpression();
                    break;
                case DOUBLECOLON:
                    jj_consume_token(DOUBLECOLON);
                    PostfixExpression();
                    break;
                case LBRACKET:
                    jj_consume_token(LBRACKET);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case STAR:
                        case SLASH:
                        case REM:
                            Expression();
                            break;
                        default:
                            jj_la1[26] = jj_gen;
                            ;
                    }
                    jj_consume_token(RBRACKET);
                    break;
                case LBRACE:
                    jj_consume_token(LBRACE);
                    Expression();
                    jj_consume_token(RBRACE);
                    break;
                default:
                    jj_la1[27] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    final public void PrimaryExpression() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TRIPLE_QUOTE_LITERAL:
            case FALSE:
            case NULL:
            case NULLID:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case 112:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 112:
                        jj_consume_token(112);
                        break;
                    default:
                        jj_la1[28] = jj_gen;
                        ;
                }
                Constant();
                break;
            case LPAREN:
                jj_consume_token(LPAREN);
                Expression();
                jj_consume_token(RPAREN);
                break;
            default:
                jj_la1[29] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Variable() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case BOOLEAN:
                jj_consume_token(BOOLEAN);
                break;
            case INTEGER:
                jj_consume_token(INTEGER);
                break;
            case INT3:
                jj_consume_token(INT3);
                break;
            case REAL:
                jj_consume_token(REAL);
                break;
            case TEXT:
                jj_consume_token(TEXT);
                break;
            case VEC2:
                jj_consume_token(VEC2);
                break;
            case VEC3:
                jj_consume_token(VEC3);
                break;
            case VOID:
                jj_consume_token(VOID);
                break;
            case IDENT:
                jj_consume_token(IDENT);
                break;
            default:
                jj_la1[30] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void ArgumentExpressionList() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case STAR:
            case SLASH:
            case REM:
                Expression();
                break;
            default:
                jj_la1[31] = jj_gen;
                ;
        }
        label_8:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[32] = jj_gen;
                    break label_8;
            }
            jj_consume_token(COMMA);
            Expression();
        }
    }

    final public void Constant() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case INTEGER_LITERAL:
                jj_consume_token(INTEGER_LITERAL);
                break;
            case FLOATING_POINT_LITERAL:
                jj_consume_token(FLOATING_POINT_LITERAL);
                break;
            case TRIPLE_QUOTE_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                String();
                break;
            case FALSE:
                jj_consume_token(FALSE);
                break;
            case TRUE:
                jj_consume_token(TRUE);
                break;
            case NULL:
                jj_consume_token(NULL);
                break;
            case NULLID:
                jj_consume_token(NULLID);
                break;
            case IDENTIFIER:
                jj_consume_token(IDENTIFIER);
                break;
            default:
                jj_la1[33] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void String() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TRIPLE_QUOTE_LITERAL:
                jj_consume_token(TRIPLE_QUOTE_LITERAL);
                break;
            case STRING_LITERAL:
                jj_consume_token(STRING_LITERAL);
                break;
            case CHARACTER_LITERAL:
                jj_consume_token(CHARACTER_LITERAL);
                break;
            default:
                jj_la1[34] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_2_16(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_16();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(15, xla);
        }
    }

    private boolean jj_2_17(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_17();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(16, xla);
        }
    }

    private boolean jj_3R_21() {
        if (jj_3R_22()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_45() {
        if (jj_scan_token(SWITCH)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_8() {
        if (jj_scan_token(HOOK)) {
            return true;
        }
        if (jj_3R_16()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_44() {
        if (jj_scan_token(IF)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_37() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_44()) {
            jj_scanpos = xsp;
            if (jj_3R_45()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_20() {
        if (jj_3R_21()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_36() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_19() {
        if (jj_3R_20()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_7() {
        if (jj_3R_15()) {
            return true;
        }
        if (jj_3R_16()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_10() {
        if (jj_3R_16()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_18() {
        if (jj_3R_19()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_6() {
        if (jj_scan_token(AND)) {
            return true;
        }
        if (jj_3R_14()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_5() {
        if (jj_scan_token(OR)) {
            return true;
        }
        if (jj_3R_13()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_9() {
        if (jj_scan_token(CASE)) {
            return true;
        }
        if (jj_3R_16()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_17() {
        if (jj_3R_18()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_42() {
        if (jj_scan_token(CONST)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_43() {
        if (jj_3R_17()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_33() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(13)) {
            jj_scanpos = xsp;
            if (jj_scan_token(29)) {
                jj_scanpos = xsp;
                if (jj_scan_token(30)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(38)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(45)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(46)) {
                                jj_scanpos = xsp;
                                if (jj_scan_token(47)) {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(48)) {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(28)) {
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_15() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(73)) {
            jj_scanpos = xsp;
            if (jj_scan_token(72)) {
                jj_scanpos = xsp;
                if (jj_scan_token(97)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(98)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(99)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(100)) {
                                jj_scanpos = xsp;
                                if (jj_scan_token(105)) {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(104)) {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(101)) {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(102)) {
                                                jj_scanpos = xsp;
                                                if (jj_scan_token(103)) {
                                                    jj_scanpos = xsp;
                                                    if (jj_scan_token(106)) {
                                                        jj_scanpos = xsp;
                                                        if (jj_scan_token(107)) {
                                                            return true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_34() {
        if (jj_3R_43()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_32() {
        if (jj_3R_42()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_31() {
        if (jj_3R_41()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_30() {
        if (jj_3R_40()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_29() {
        if (jj_3R_39()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_28() {
        if (jj_3R_38()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_27() {
        if (jj_3R_37()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_14() {
        if (jj_3R_34()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_3R_36()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_10()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_9()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_11() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_1()) {
            jj_scanpos = xsp;
            if (jj_3_2()) {
                jj_scanpos = xsp;
                if (jj_3R_26()) {
                    jj_scanpos = xsp;
                    if (jj_3R_27()) {
                        jj_scanpos = xsp;
                        if (jj_3R_28()) {
                            jj_scanpos = xsp;
                            if (jj_3R_29()) {
                                jj_scanpos = xsp;
                                if (jj_3R_30()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_31()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_32()) {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(69)) {
                                                return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_13() {
        if (jj_3R_14()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_17() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(89)) {
            jj_scanpos = xsp;
            if (jj_scan_token(90)) {
                jj_scanpos = xsp;
                if (jj_scan_token(95)) {
                    return true;
                }
            }
        }
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_16() {
        if (jj_3R_13()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_41() {
        if (jj_scan_token(LOG)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_3() {
        if (jj_scan_token(ELSE)) {
            return true;
        }
        if (jj_3R_11()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_16() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(110)) {
            jj_scanpos = xsp;
            if (jj_scan_token(111)) {
                return true;
            }
        }
        if (jj_3R_24()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_4() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_12()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_scan_token(INCLUDE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_15() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(75)) {
            jj_scanpos = xsp;
            if (jj_scan_token(74)) {
                jj_scanpos = xsp;
                if (jj_scan_token(82)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(83)) {
                        return true;
                    }
                }
            }
        }
        if (jj_3R_23()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_14() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(81)) {
            jj_scanpos = xsp;
            if (jj_scan_token(84)) {
                jj_scanpos = xsp;
                if (jj_scan_token(108)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(109)) {
                        return true;
                    }
                }
            }
        }
        if (jj_3R_22()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_12() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(60)) {
            jj_scanpos = xsp;
        }
        xsp = jj_scanpos;
        if (jj_scan_token(93)) {
            jj_scanpos = xsp;
        }
        if (jj_3R_33()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_35() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(91)) {
            jj_scanpos = xsp;
            if (jj_scan_token(92)) {
                jj_scanpos = xsp;
                if (jj_scan_token(96)) {
                    return true;
                }
            }
        }
        if (jj_3R_35()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_13() {
        if (jj_scan_token(BIT_AND)) {
            return true;
        }
        if (jj_3R_21()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_25() {
        if (jj_3R_35()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_12() {
        if (jj_scan_token(TEXT_APPEND)) {
            return true;
        }
        if (jj_3R_20()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_24() {
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_11() {
        if (jj_scan_token(BIT_OR)) {
            return true;
        }
        if (jj_3R_19()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_50() {
        if (jj_scan_token(RETURN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_49() {
        if (jj_scan_token(BREAK)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_48() {
        if (jj_scan_token(CONTINUE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_39() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_48()) {
            jj_scanpos = xsp;
            if (jj_3R_49()) {
                jj_scanpos = xsp;
                if (jj_3R_50()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_23() {
        if (jj_3R_24()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_10() {
        if (jj_scan_token(AND)) {
            return true;
        }
        if (jj_3R_18()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_47() {
        if (jj_scan_token(FOREACH)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_9() {
        if (jj_scan_token(OR)) {
            return true;
        }
        if (jj_3R_17()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_22() {
        if (jj_3R_23()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_46() {
        if (jj_scan_token(WHILE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_38() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_46()) {
            jj_scanpos = xsp;
            if (jj_3R_47()) {
                return true;
            }
        }
        return false;
    }
    /**
     * Generated Token Manager.
     */
    public ManiaScriptParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[35];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0xb03c000, 0xb034000, 0xb03c000, 0x2000000, 0x0, 0x1000000, 0x0, 0x0, 0x0, 0x24000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x400200, 0x70002000, 0x0, 0x0, 0x400200, 0x200,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x808a0, 0x808a0, 0x808a0, 0x800, 0x0, 0x80000, 0x100000, 0x100000, 0x0, 0x80, 0x10000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80000000, 0x0, 0x80000000, 0x0, 0x9d101018, 0x1e040, 0x0, 0x0, 0x1d101018, 0xc000000,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x18000022, 0x22, 0x18000022, 0x0, 0x18000000, 0x0, 0x0, 0x0, 0x18000000, 0x0, 0x0, 0x20000000, 0x100, 0x300, 0x120000, 0xc0c00, 0x0, 0x86000000, 0x18000000, 0x24003000, 0x24003000, 0x1800000, 0x1800000, 0x1800000, 0x1800000, 0x1008a, 0x18000000, 0x1008a, 0x0, 0x0, 0x0, 0x18000000, 0x40, 0x0, 0x0,};
    }

    private static void jj_la1_init_3() {
        jj_la1_3 = new int[]{0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0xffe, 0x3000, 0x0, 0xc000, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x10000, 0x10000, 0x0, 0x1, 0x0, 0x0, 0x0,};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[17];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /**
     * Constructor with InputStream.
     */
    public ManiaScriptParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public ManiaScriptParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new ManiaScriptParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 35; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 35; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Constructor.
     */
    public ManiaScriptParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new ManiaScriptParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 35; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 35; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Constructor with generated Token Manager.
     */
    public ManiaScriptParser(ManiaScriptParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 35; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(ManiaScriptParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 35; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        if (jj_scanpos.kind != kind) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            throw jj_ls;
        }
        return false;
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }
    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[113];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 35; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0) {
                        la1tokens[96 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 113; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 17; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                            case 15:
                                jj_3_16();
                                break;
                            case 16:
                                jj_3_17();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {

        int gen;
        Token first;
        int arg;
        JJCalls next;
    }
}
