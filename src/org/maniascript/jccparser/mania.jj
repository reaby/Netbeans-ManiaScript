options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = true;
  STATIC = false;
  JDK_VERSION = "1.5";
  COMMON_TOKEN_ACTION = false;
  TOKEN_FACTORY = "Token";
}


PARSER_BEGIN(ManiaScriptParser)

package org.maniascript.jccparser;
import java.io.*;
import java.util.*;

public class ManiaScriptParser {

public static void main ( String args [ ] ) {
        ManiaScriptParser parser;
		if(args.length == 0){
			System.out.println("ManiaScript Parser Version 0.1Alpha:  Reading from standard input . . .");
			parser = new ManiaScriptParser(System.in);
		} else if (args.length == 1) {
			System.out.println("ManiaScript Parser Version 0.1Alpha:  Reading from file " + args[0] + " . . ." );
			try {
				parser = new ManiaScriptParser(new java.io.FileInputStream(args[0]));
			}
			catch(java.io.FileNotFoundException e){
				System.out.println("ManiaScript Parser Version 0.1:  File " + args[0] + " not found.");
				return ;
			}
		} else {
			System.out.println("ManiaScript Parser Version 0.1Alpha:  Usage is one of:");
			System.out.println("         java ManiaScript < inputfile");
			System.out.println("OR");
			System.out.println("         java ManiaScript inputfile");
			return ;
		}		
		try {
			parser.ManiaScriptFile();
			System.out.println("ManiaScript Parser Version 0.1Alpha:  ManiaScript file parsed successfully.");
		}
		catch(ParseException e) {
			System.out.println("ManiaScript Parser Version 0.1Alpha:  Encountered errors during parse.");
			System.out.println(e.getMessage());
		}
	}
}

PARSER_END(ManiaScriptParser)

/* WHITE SPACE */

TOKEN :
{
  < WHITESPACE:
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f" >
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
|
  "\"\"\"" : IN_TRIPLE_QUOTE_LITERAL

}

<IN_SINGLE_LINE_COMMENT>
TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_TRIPLE_QUOTE_LITERAL>
TOKEN :
{
  <TRIPLE_QUOTE_LITERAL: "\"\"\"" > : DEFAULT
}


<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT, IN_TRIPLE_QUOTE_LITERAL>
MORE :
{
  < ~[] >
}

/*  RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ASSERT: "assert" >
| < AS: "as" >
| < BOOLEAN: "Boolean" >
| < BREAK: "break" >
| < CASE: "case" >
| < CONST: "#Const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DECLARE: "declare" >
| < ELSE: "else" >
| < EXTENDS: "#Extends" >
| < FALSE: "False" >
| < FOR: "for" >
| < FOREACH: "foreach" >
| < IF: "if" >
| < IN: "in" >
| < INCLUDE: "#Include" >
| < IDENT: "Indent" >
| < INTEGER: "Integer" >
| < INT3: "Int3" >
| < MAIN: "main" >
| < NOW: "Now" >
| < NETREAD: "netread" >
| < NETWRITE: "netwrite" >
| < NULL: "Null" >
| < NULLID: "NullId" >
| < LOG: "log" >
| < REAL: "Real" >
| < RETURN: "return" >
| < REQUIRECONTEXT: "#RequireContext" >
| < SLEEP: "sleep" >
| < SETTING: "#Setting" >
| < SWITCH: "switch" >
| < TRUE: "True" >
| < TEXT: "Text" >
| < VEC2: "Vec2" >
| < VEC3: "Vec3" >
| < VOID: "Void" >
| < WAIT: "wait" >
| < YIELD: "yield" >
| < WHILE: "while" >
| < PERSISTENT: "persistent" >
}


/* MANIASCRIPT LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            | "u" (["0"-"9"] | ["a"-"f"] | ["A"-"F"]) (["0"-"9"] | ["a"-"f"] | ["A"-"F"]) (["0"-"9"] | ["a"-"f"] | ["A"-"F"]) (["0"-"9"] | ["a"-"f"] | ["A"-"F"])
            )
          )
      )*
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            | "u" (["0"-"9"] | ["a"-"f"] | ["A"-"F"]) (["0"-"9"] | ["a"-"f"] | ["A"-"F"]) (["0"-"9"] | ["a"-"f"] | ["A"-"F"]) (["0"-"9"] | ["a"-"f"] | ["A"-"F"])
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < ALIAS: "<=>" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < DOUBLECOLON: "::" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < OR: "||" >
| < AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < TEXT_APPEND: "^" >
| < REM: "%" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < TEXTASSIGN: "^=" >
| < REMASSIGN: "%=" >

}


/* 
 *  LANGUAGE PARSER STARTS HERE
 */

void ManiaScriptFile() : {}
{
	
		(Statement())+
	| 	<EOF>
	
}

void Statement() : {}
{
	( 
        LOOKAHEAD(2) LabeledStatement() |
	LOOKAHEAD(2) ExpressionStatement() |
	CompoundStatement() |
	SelectionStatement() |
	IterationStatement() |
	JumpStatement() |
	IncludeStatement() |
	LogStatement() |
	DefineStatement() )
	EndOfStatement()
}

void EndOfStatement() : {}
{
	";"
}

void DefineStatement() : {}
{
	<CONST> String() Expression() 
}

void LabeledStatement() : {}
{
	<CASE> Expression() ":" Statement()
}

void ExpressionStatement() : {}
{
	Expression() EndOfStatement()
}

void CompoundStatement() : {}
{
	"{"
	    ( Statement())*
	"}"
}

void SelectionStatement() : {}
{
	<IF> "(" Expression() ")" Statement() [ LOOKAHEAD(2) <ELSE> Statement() ] 
    |
	<SWITCH> "(" Expression() ")" Statement()
}

void IterationStatement() : {}
{
	<WHILE> "(" Expression() ")" Statement() 
        |
	<FOREACH> "(" [Expression() ] <IN> Variable() ")" Statement()
}

void JumpStatement() : {}
{
	<CONTINUE> [<INTEGER_LITERAL>] EndOfStatement() |
	<BREAK> [<INTEGER_LITERAL>] EndOfStatement() |
	<RETURN> [ Expression() ] EndOfStatement()
}


void ParameterList() : {}
{
	Parameter() (LOOKAHEAD(2) "," Parameter())*
}

void Parameter() : {}
{
	[<IDENTIFIER> ] ["&"] Variable() ( "=" Expression())?
}

void IncludeStatement() : {}
{
	<INCLUDE> String() ( <AS> Variable() )
}

void ConstStatement() : {}
{
	<CONST> Variable() (<AS> String() )
}

void LogStatement() : {}
{
	<LOG> ArgumentExpressionList() EndOfStatement()
}

void Expression() : {}
{
	 LogicalTextOrExpression()
}

void LogicalTextOrExpression() :{}
{
	LogicalTextAndExpression() [LOOKAHEAD(2) <OR> LogicalTextOrExpression() ]
}

void LogicalTextAndExpression() : {}
{
	AssignmentExpression() [LOOKAHEAD(2) <AND> LogicalTextAndExpression() ]
}

void AssignmentExpression() : {}
{
	ConditionalExpression() [LOOKAHEAD(2) AssignmentOperator() Expression()]
}

void AssignmentOperator() : {}
{
	( "<=>" | "=" | "+=" | "-=" | "*=" | "/=" | ".=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" )
}

void ConditionalExpression() : {}
{
	Logical_Or_Expression() [LOOKAHEAD(2) "?" Expression() ":" Expression() ]
}


void Logical_Or_Expression() : {}
{
	Logical_And_Expression() [LOOKAHEAD(2) "||" Logical_Or_Expression() ]
}

void Logical_And_Expression() : {}
{
	BitwiseOrExpression() [LOOKAHEAD(2) "&&" Logical_And_Expression() ]
}

void BitwiseOrExpression() : {}
{
	BitwiseXorExpression() [LOOKAHEAD(2) "|" BitwiseOrExpression() ]
}

void BitwiseXorExpression() : {}
{
	BitwiseAndExpression() [LOOKAHEAD(2) "^" BitwiseXorExpression() ]
}

void BitwiseAndExpression() : {}
{
	EqualityExpression() [LOOKAHEAD(2) "&" BitwiseAndExpression() ]
}

void EqualityExpression() : {}
{
	RelationalExpression() [LOOKAHEAD(2) ( "==" | "!=" | "===" | "!==" ) EqualityExpression() ]
}

void RelationalExpression() : {}
{
	ShiftExpression() [LOOKAHEAD(2) ( "<" | ">" | "<=" | ">=" ) RelationalExpression() ]
}

void ShiftExpression() : {}
{
	AdditiveExpression() [LOOKAHEAD(2) ( "<<" | ">>" ) ShiftExpression() ]
}

void AdditiveExpression() : {}
{
	MultiplicativeExpression() [LOOKAHEAD(2) ( "+" | "-" | "^" ) AdditiveExpression() ]
}

void MultiplicativeExpression() : {}
{
     ( "*" | "/" | "%" ) MultiplicativeExpression()
}


void UnaryExpression() : {}
{
	("&" | "-" | "~" | "!")* PrefixIncDecExpression()
}

void PrefixIncDecExpression() : {}
{
	("++" | "--" )*
}

void PostfixIncDecExpression() : {}
{
	 ("++" | "--" )*
}

void PostfixExpression() : {}
{
	PrimaryExpression() ( "(" ArgumentExpressionList() ")" |
						  "." PostfixExpression() | 
						  "::" PostfixExpression() |
						  "[" [ Expression()] "]" |
						  "{" Expression() "}"
						 )*
}

void PrimaryExpression() : {}
{

	["@"] Constant() |
	"(" Expression() ")"
}

void Variable() : {}
{
    <BOOLEAN> 
|   <INTEGER> 
|   <INT3>
|   <REAL>
|   <TEXT>
|   <VEC2>
|   <VEC3>
|   <VOID>
|   <IDENT>
}


void ArgumentExpressionList() : {}
{
	[Expression()] ( "," Expression() )*
}

void Constant() : {}
{
	<INTEGER_LITERAL> | <FLOATING_POINT_LITERAL> | String() | <FALSE> | <TRUE> | <NULL> | <NULLID> | <IDENTIFIER>
}

void String() : {}
{
	<TRIPLE_QUOTE_LITERAL>|
        <STRING_LITERAL>|
        <CHARACTER_LITERAL>
}

