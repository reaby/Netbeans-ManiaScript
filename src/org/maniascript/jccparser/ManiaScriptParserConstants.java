/* Generated By:JavaCC: Do not edit this line. ManiaScriptParserConstants.java */
package org.maniascript.jccparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ManiaScriptParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 7;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int TRIPLE_QUOTE_LITERAL = 9;
  /** RegularExpression Id. */
  int ASSERT = 11;
  /** RegularExpression Id. */
  int AS = 12;
  /** RegularExpression Id. */
  int BOOLEAN = 13;
  /** RegularExpression Id. */
  int BREAK = 14;
  /** RegularExpression Id. */
  int CASE = 15;
  /** RegularExpression Id. */
  int CONST = 16;
  /** RegularExpression Id. */
  int CONTINUE = 17;
  /** RegularExpression Id. */
  int _DEFAULT = 18;
  /** RegularExpression Id. */
  int DECLARE = 19;
  /** RegularExpression Id. */
  int ELSE = 20;
  /** RegularExpression Id. */
  int EXTENDS = 21;
  /** RegularExpression Id. */
  int FALSE = 22;
  /** RegularExpression Id. */
  int FOR = 23;
  /** RegularExpression Id. */
  int FOREACH = 24;
  /** RegularExpression Id. */
  int IF = 25;
  /** RegularExpression Id. */
  int IN = 26;
  /** RegularExpression Id. */
  int INCLUDE = 27;
  /** RegularExpression Id. */
  int IDENT = 28;
  /** RegularExpression Id. */
  int INTEGER = 29;
  /** RegularExpression Id. */
  int INT3 = 30;
  /** RegularExpression Id. */
  int MAIN = 31;
  /** RegularExpression Id. */
  int NOW = 32;
  /** RegularExpression Id. */
  int NETREAD = 33;
  /** RegularExpression Id. */
  int NETWRITE = 34;
  /** RegularExpression Id. */
  int NULL = 35;
  /** RegularExpression Id. */
  int NULLID = 36;
  /** RegularExpression Id. */
  int LOG = 37;
  /** RegularExpression Id. */
  int REAL = 38;
  /** RegularExpression Id. */
  int RETURN = 39;
  /** RegularExpression Id. */
  int REQUIRECONTEXT = 40;
  /** RegularExpression Id. */
  int SLEEP = 41;
  /** RegularExpression Id. */
  int SETTING = 42;
  /** RegularExpression Id. */
  int SWITCH = 43;
  /** RegularExpression Id. */
  int TRUE = 44;
  /** RegularExpression Id. */
  int TEXT = 45;
  /** RegularExpression Id. */
  int VEC2 = 46;
  /** RegularExpression Id. */
  int VEC3 = 47;
  /** RegularExpression Id. */
  int VOID = 48;
  /** RegularExpression Id. */
  int WAIT = 49;
  /** RegularExpression Id. */
  int YIELD = 50;
  /** RegularExpression Id. */
  int WHILE = 51;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 52;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 53;
  /** RegularExpression Id. */
  int HEX_LITERAL = 54;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 55;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 56;
  /** RegularExpression Id. */
  int EXPONENT = 57;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 58;
  /** RegularExpression Id. */
  int STRING_LITERAL = 59;
  /** RegularExpression Id. */
  int IDENTIFIER = 60;
  /** RegularExpression Id. */
  int LETTER = 61;
  /** RegularExpression Id. */
  int DIGIT = 62;
  /** RegularExpression Id. */
  int LPAREN = 63;
  /** RegularExpression Id. */
  int RPAREN = 64;
  /** RegularExpression Id. */
  int LBRACE = 65;
  /** RegularExpression Id. */
  int RBRACE = 66;
  /** RegularExpression Id. */
  int LBRACKET = 67;
  /** RegularExpression Id. */
  int RBRACKET = 68;
  /** RegularExpression Id. */
  int SEMICOLON = 69;
  /** RegularExpression Id. */
  int COMMA = 70;
  /** RegularExpression Id. */
  int DOT = 71;
  /** RegularExpression Id. */
  int ASSIGN = 72;
  /** RegularExpression Id. */
  int ALIAS = 73;
  /** RegularExpression Id. */
  int GT = 74;
  /** RegularExpression Id. */
  int LT = 75;
  /** RegularExpression Id. */
  int BANG = 76;
  /** RegularExpression Id. */
  int TILDE = 77;
  /** RegularExpression Id. */
  int HOOK = 78;
  /** RegularExpression Id. */
  int COLON = 79;
  /** RegularExpression Id. */
  int DOUBLECOLON = 80;
  /** RegularExpression Id. */
  int EQ = 81;
  /** RegularExpression Id. */
  int LE = 82;
  /** RegularExpression Id. */
  int GE = 83;
  /** RegularExpression Id. */
  int NE = 84;
  /** RegularExpression Id. */
  int OR = 85;
  /** RegularExpression Id. */
  int AND = 86;
  /** RegularExpression Id. */
  int INCR = 87;
  /** RegularExpression Id. */
  int DECR = 88;
  /** RegularExpression Id. */
  int PLUS = 89;
  /** RegularExpression Id. */
  int MINUS = 90;
  /** RegularExpression Id. */
  int STAR = 91;
  /** RegularExpression Id. */
  int SLASH = 92;
  /** RegularExpression Id. */
  int BIT_AND = 93;
  /** RegularExpression Id. */
  int BIT_OR = 94;
  /** RegularExpression Id. */
  int TEXT_APPEND = 95;
  /** RegularExpression Id. */
  int REM = 96;
  /** RegularExpression Id. */
  int PLUSASSIGN = 97;
  /** RegularExpression Id. */
  int MINUSASSIGN = 98;
  /** RegularExpression Id. */
  int STARASSIGN = 99;
  /** RegularExpression Id. */
  int SLASHASSIGN = 100;
  /** RegularExpression Id. */
  int ANDASSIGN = 101;
  /** RegularExpression Id. */
  int ORASSIGN = 102;
  /** RegularExpression Id. */
  int TEXTASSIGN = 103;
  /** RegularExpression Id. */
  int REMASSIGN = 104;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;
  /** Lexical state. */
  int IN_TRIPLE_QUOTE_LITERAL = 4;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "\"//\"",
    "<token of kind 3>",
    "\"/*\"",
    "\"\\\"\\\"\\\"\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "\"\\\"\\\"\\\"\"",
    "<token of kind 10>",
    "\"assert\"",
    "\"as\"",
    "\"Boolean\"",
    "\"break\"",
    "\"case\"",
    "\"#Const\"",
    "\"continue\"",
    "\"default\"",
    "\"declare\"",
    "\"else\"",
    "\"#Extends\"",
    "\"False\"",
    "\"for\"",
    "\"foreach\"",
    "\"if\"",
    "\"in\"",
    "\"#Include\"",
    "\"Indent\"",
    "\"Integer\"",
    "\"Int3\"",
    "\"main\"",
    "\"Now\"",
    "\"netread\"",
    "\"netwrite\"",
    "\"Null\"",
    "\"NullId\"",
    "\"log\"",
    "\"Real\"",
    "\"return\"",
    "\"#RequireContext\"",
    "\"sleep\"",
    "\"#Setting\"",
    "\"switch\"",
    "\"True\"",
    "\"Text\"",
    "\"Vec2\"",
    "\"Vec3\"",
    "\"Void\"",
    "\"wait\"",
    "\"yield\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"<=>\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"::\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\".=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"===\"",
    "\"!==\"",
    "\"<<\"",
    "\">>\"",
    "\"@\"",
  };

}
